generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// TODO: implement multiple plans, for now, only support one plan for prototype
model User {
    user_id          String           @id @default(cuid())
    test_credits     TestCredit[]
    transfer_credits TransferCredit[]
    degree_plan      DegreePlan?

    @@map("user")
}

model TestCredit {
    id      String @id @default(cuid()) @map("id")
    user_id String @map("user_id")
    User    User   @relation(fields: [user_id], references: [user_id])

    @@map("test_credit")
}

model TransferCredit {
    id      String @id @default(cuid()) @map("id")
    user_id String @map("user_id")
    User    User   @relation(fields: [user_id], references: [user_id])

    @@map("transfer_credit")
}

model DegreePlan {
    id               String             @id @default(cuid()) @map("id")
    user_id          String             @unique @map("user_id")
    User             User               @relation(fields: [user_id], references: [user_id])
    name             String             @map("name")
    RootBlock        BlockRequirement   @relation(fields: [block_id], references: [block_id])
    block_id         String             @unique @map("block_id")
    DegreePlanCourse DegreePlanCourse[]

    @@map("degree_plan")
}

enum SemesterTerm {
    FALL
    SPRING
    SUMMER
}

model DegreePlanCourse {
    id            String       @id @default(cuid()) @map("id")
    degree_id     String       @map("degree_id")
    DegreePlan    DegreePlan   @relation(fields: [degree_id], references: [id])
    Course        Course       @relation(fields: [prefix, number], references: [prefix, number])
    prefix        String       @map("prefix")
    number        String       @map("number")
    semester_year String       @map("semester")
    semester_term SemesterTerm @map("term")

    @@map("degree_plan_course")
}

model Course {
    prefix                 String              @map("prefix")
    number                 String              @map("number")
    name                   String              @map("name")
    CourseBlock            CourseBlock[]
    CoreCurriculumArea     CoreCurriculumArea? @relation(fields: [coreCurriculumAreaName], references: [name])
    coreCurriculumAreaName String?             @map("core_curriculum_area_name")
    DegreePlanCourse       DegreePlanCourse[]

    @@id(name: "course_id", [prefix, number])
    @@map("course")
}

model CoreCurriculumArea {
    name    String   @id @map("name")
    courses Course[]

    @@map("core_curriculum_area")
}

model BlockRequirement {
    block_id          String             @id @default(cuid()) @map("block_id")
    block_name        String             @map("block_name")
    parent_block_id   String?            @map("parent_block_id")
    parent_block      BlockRequirement?  @relation("BlockHierarchy", fields: [parent_block_id], references: [block_id])
    inner_blocks      BlockRequirement[] @relation("BlockHierarchy")
    // TODO: use lexoranking for ordering
    block_position    Int                @default(1) @map("block_position")
    // PLEASE ONLY USE ONE AND ONLY ONE OF THE BLOCKS BELOW
    NonterminalBlock  NonterminalBlock?
    CourseBlock       CourseBlock?
    TextBlock         TextBlock?
    MatcherGroupBlock MatcherGroupBlock?
    FlagToggleBlock   FlagToggleBlock?
    // should only be true for the root block
    DegreePlan        DegreePlan?

    @@map("block_requirement")
}

model NonterminalBlock {
    id    String           @id @default(cuid()) @map("id")
    block BlockRequirement @relation(fields: [id], references: [block_id])
}

model CourseBlock {
    id     String           @id @default(cuid()) @map("id")
    block  BlockRequirement @relation(fields: [id], references: [block_id])
    course Course           @relation(fields: [prefix, number], references: [prefix, number])
    prefix String           @map("prefix")
    number String           @map("number")
}

model TextBlock {
    id    String           @id @default(cuid()) @map("id")
    block BlockRequirement @relation(fields: [id], references: [block_id])
    text  String
}

model MatcherGroupBlock {
    id    String           @id @default(cuid()) @map("id")
    block BlockRequirement @relation(fields: [id], references: [block_id])
}

model FlagToggleBlock {
    id    String           @id @default(cuid()) @map("id")
    block BlockRequirement @relation(fields: [id], references: [block_id])
}
