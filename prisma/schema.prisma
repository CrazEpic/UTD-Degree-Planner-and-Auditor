generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model TestEquivalency {
    testComponentID         String       @id @map("test_component_id")
    courseEquivalency       Json         @map("course_equivalency")
    maxClaimableCreditHours Int          @map("max_claimable_credit_hours")
    TestCredit              TestCredit[]

    @@map("test_equivalency")
}

model TransferCourseEquivalency {
    externalSchool    String           @map("external_school")
    externalCourseID  String           @map("external_course_id")
    courseEquivalency Json             @map("course_equivalency")
    TransferCredit    TransferCredit[]

    @@id(name: "transferCourseEquivalencyID", [externalSchool, externalCourseID])
    @@map("transfer_course_equivalency")
}

model Course {
    prefix                 String              @map("prefix")
    number                 String              @map("number")
    name                   String              @map("name")
    CourseBlocks           CourseBlock[]
    CoreCurriculumArea     CoreCurriculumArea? @relation(fields: [coreCurriculumAreaName], references: [coreCurriculumAreaName])
    coreCurriculumAreaName String?             @map("core_curriculum_area_name")
    DegreePlanCourses      DegreePlanCourse[]
    // TODO: should I not be lazy and make actual tables for these?
    requisites             Json                @map("requisites")

    @@id(name: "courseID", [prefix, number])
    @@map("course")
}

model CoreCurriculumArea {
    coreCurriculumAreaName String   @id @map("core_curriculum_area_name")
    Courses                Course[]

    @@map("core_curriculum_area")
}

model Degree {
    degreeName String           @map("degree_name")
    degreeYear String           @map("degree_year")
    RootBlock  BlockRequirement @relation(fields: [blockID], references: [blockID])
    blockID    String           @unique @map("block_id")
    DegreePlan DegreePlan[]

    @@id(name: "degreeID", [degreeName, degreeYear])
    @@map("degree")
}

model BlockRequirement {
    blockID           String             @id @default(cuid()) @map("block_id")
    blockName         String             @map("block_name")
    parentBlockID     String?            @map("parent_block_id")
    ParentBlock       BlockRequirement?  @relation("BlockHierarchy", fields: [parentBlockID], references: [blockID], onDelete: Cascade)
    InnerBlocks       BlockRequirement[] @relation("BlockHierarchy")
    // TODO: use lexoranking for ordering
    blockPosition     Int                @default(1) @map("block_position")
    // PLEASE ONLY USE ONE AND ONLY ONE OF THE BLOCKS BELOW
    NonterminalBlock  NonterminalBlock?
    CourseBlock       CourseBlock?
    TextBlock         TextBlock?
    MatcherGroupBlock MatcherGroupBlock?
    FlagToggleBlock   FlagToggleBlock?
    // should only be true for the root block
    Degree            Degree?

    DegreePlanCourseCreditHourClaims DegreePlanCourseCreditHourClaim[]

    @@map("block_requirement")
}

model NonterminalBlock {
    id         String           @id @default(cuid()) @map("id")
    Block      BlockRequirement @relation(fields: [id], references: [blockID], onDelete: Cascade)
    conditions Json             @map("conditions")

    @@map("nonterminal_block")
}

model CourseBlock {
    id     String           @id @default(cuid()) @map("id")
    Block  BlockRequirement @relation(fields: [id], references: [blockID], onDelete: Cascade)
    Course Course           @relation(fields: [prefix, number], references: [prefix, number])
    prefix String           @map("prefix")
    number String           @map("number")

    @@map("course_block")
}

model TextBlock {
    id    String           @id @default(cuid()) @map("id")
    Block BlockRequirement @relation(fields: [id], references: [blockID], onDelete: Cascade)
    text  String           @default("") @map("text")

    @@map("text_block")
}

model MatcherGroupBlock {
    id      String           @id @default(cuid()) @map("id")
    Block   BlockRequirement @relation(fields: [id], references: [blockID], onDelete: Cascade)
    matcher Json             @map("matcher")

    @@map("matcher_group_block")
}

// assume Block.InnerBlocks has only two blocks, position 0 is false, 1 is true
model FlagToggleBlock {
    id         String           @id @default(cuid()) @map("id")
    Block      BlockRequirement @relation(fields: [id], references: [blockID], onDelete: Cascade)
    DegreeFlag DegreeFlag       @relation(fields: [flag_id], references: [id])
    flag_id    String           @map("flag")

    @@map("flag_toggle_block")
}

model DegreeFlag {
    id   String @id @default(cuid()) @map("id")
    flag String @map("flag")

    FlagToggleBlock FlagToggleBlock[]

    @@map("degree_flag")
}

/**
 * USER SPECIFIC INFORMATION
 */

// TODO: implement multiple plans, for now, only support one plan for prototype
model User {
    userID          String           @id @default(cuid())
    username        String           @map("username")
    TestCredits     TestCredit[]
    TransferCredits TransferCredit[]
    DegreePlan      DegreePlan?

    @@map("user")
}

model TestCredit {
    TestEquivalency  TestEquivalency    @relation(fields: [testComponentID], references: [testComponentID])
    testComponentID  String             @map("test_component_id")
    userID           String             @map("user_id")
    User             User               @relation(fields: [userID], references: [userID])
    DegreePlanCourse DegreePlanCourse[]

    @@id(name: "testCreditID", [userID, testComponentID])
    @@map("test_credit")
}

model TransferCredit {
    userID                    String                    @map("user_id")
    User                      User                      @relation(fields: [userID], references: [userID])
    TransferCourseEquivalency TransferCourseEquivalency @relation(fields: [externalSchool, externalCourseID], references: [externalSchool, externalCourseID])
    externalSchool            String                    @map("external_school")
    externalCourseID          String                    @map("external_course_id")
    DegreePlanCourse          DegreePlanCourse[]

    @@id(name: "transferCreditID", [userID, externalSchool, externalCourseID])
    @@map("transfer_credit")
}

model DegreePlan {
    degreePlanID      String             @id @default(cuid()) @map("degree_plan_id")
    userID            String             @unique @map("user_id")
    User              User               @relation(fields: [userID], references: [userID])
    name              String             @map("name")
    Degree            Degree             @relation(fields: [degreeName, degreeYear], references: [degreeName, degreeYear])
    degreeName        String             @map("degree_name")
    degreeYear        String             @map("degree_year")
    DegreePlanCourses DegreePlanCourse[]
    selectionOptions  Json               @map("selection_options")

    @@map("degree_plan")
}

enum SemesterTerm {
    FALL
    SPRING
    SUMMER
}

// has its own id because you can repeat a course for credit
model DegreePlanCourse {
    degreePlanCourseID String          @id @default(cuid()) @map("degree_plan_course_id")
    degreePlanID       String          @map("degree_id")
    DegreePlan         DegreePlan      @relation(fields: [degreePlanID], references: [degreePlanID])
    Course             Course          @relation(fields: [prefix, number], references: [prefix, number])
    prefix             String          @map("prefix")
    number             String          @map("number")
    // only applicable for courses at utd
    semesterYear       String?         @map("semester")
    semesterTerm       SemesterTerm?   @map("term")
    // both test and transfer uses userID
    userID             String?         @map("user_id")
    // only applicable for test credits
    TestCredit         TestCredit?     @relation(fields: [testComponentID, userID], references: [testComponentID, userID])
    testComponentID    String?         @map("test_component_id")
    // only applicable for transfer credits
    TransferCredit     TransferCredit? @relation(fields: [externalSchool, externalCourseID, userID], references: [externalSchool, externalCourseID, userID])
    externalSchool     String?         @map("external_school")
    externalCourseID   String?         @map("external_course_id")

    DegreePlanCourseCreditHourClaims DegreePlanCourseCreditHourClaim[]

    @@map("degree_plan_course")
}

model DegreePlanCourseCreditHourClaim {
    blockID            String           @map("block_id")
    Block              BlockRequirement @relation(fields: [blockID], references: [blockID])
    DegreePlanCourse   DegreePlanCourse @relation(fields: [degreePlanCourseID], references: [degreePlanCourseID])
    degreePlanCourseID String           @map("degree_plan_course_id")
    credit             Int              @map("credit")

    @@id(name: "degreePlanCourseCreditHourClaimID", [degreePlanCourseID, blockID])
}
